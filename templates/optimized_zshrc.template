# Optimized Zsh Configuration - Generated by Unified Dotfiles Framework
# This configuration is optimized for fast shell startup

# Performance optimization: Early exit for non-interactive shells
[[ $- != *i* ]] && return

# Performance optimization: Lazy loading framework
typeset -a DEFERRED_INIT_COMMANDS

# Lazy loading function
lazy_load() {
    local func_name="$1"
    local load_cmd="$2"
    
    eval "$func_name() {
        unset -f \$func_name
        \$load_cmd
        \$func_name \"\$@\"
    }"
}

# Conditional loading based on command existence
load_if_exists() {
    local cmd="$1"
    local load_cmd="$2"
    
    if command -v "$cmd" >/dev/null 2>&1; then
        eval "$load_cmd"
    fi
}

# Deferred initialization
defer_init() {
    local init_cmd="$1"
    DEFERRED_INIT_COMMANDS+=("$init_cmd")
}

# Execute deferred initializations
execute_deferred_init() {
    for cmd in "${DEFERRED_INIT_COMMANDS[@]}"; do
        eval "$cmd"
    done
    unset DEFERRED_INIT_COMMANDS
}

# Essential PATH setup (needed immediately)
{{#if HOMEBREW_PREFIX}}
export PATH="{{HOMEBREW_PREFIX}}/bin:{{HOMEBREW_PREFIX}}/sbin:$PATH"
{{/if}}
{{#if LOCAL_BIN_PATH}}
export PATH="{{LOCAL_BIN_PATH}}:$PATH"
{{/if}}

# Essential environment variables
export EDITOR="${EDITOR:-{{DEFAULT_EDITOR}}}"
export PAGER="${PAGER:-less}"
export LANG="${LANG:-en_US.UTF-8}"

# History configuration (immediate)
export HISTSIZE=10000
export SAVEHIST=20000
export HISTFILE="$HOME/.zsh_history"
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_SAVE_NO_DUPS
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY

# Basic shell options (immediate)
setopt AUTO_CD
setopt CORRECT
setopt CORRECT_ALL
setopt GLOB_COMPLETE
setopt NO_CASE_GLOB
setopt NUMERIC_GLOB_SORT

# Completion system (deferred for performance)
defer_init "load_zsh_completions"

# Defer expensive operations
{{#if ENABLE_ALIASES}}
defer_init "load_aliases"
{{/if}}

{{#if ENABLE_FUNCTIONS}}
defer_init "load_functions"
{{/if}}

{{#if ENABLE_OH_MY_ZSH}}
defer_init "load_oh_my_zsh"
{{/if}}

# Load completions
load_zsh_completions() {
    # Initialize completion system
    autoload -Uz compinit
    
    # Performance optimization: check compinit cache daily
    if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
        compinit
    else
        compinit -C
    fi
    
    # Load additional completions
    {{#if HOMEBREW_PREFIX}}
    if [[ -d "{{HOMEBREW_PREFIX}}/share/zsh-completions" ]]; then
        fpath=({{HOMEBREW_PREFIX}}/share/zsh-completions $fpath)
    fi
    {{/if}}
}

# Load aliases
load_aliases() {
    {{#each ALIAS_FILES}}
    [[ -f "{{this}}" ]] && source "{{this}}"
    {{/each}}
}

# Load functions
load_functions() {
    {{#each FUNCTION_FILES}}
    [[ -f "{{this}}" ]] && source "{{this}}"
    {{/each}}
}

# Lazy load Oh My Zsh
{{#if ENABLE_OH_MY_ZSH}}
load_oh_my_zsh() {
    export ZSH="$HOME/.oh-my-zsh"
    {{#if OH_MY_ZSH_THEME}}
    ZSH_THEME="{{OH_MY_ZSH_THEME}}"
    {{/if}}
    {{#if OH_MY_ZSH_PLUGINS}}
    plugins=({{#each OH_MY_ZSH_PLUGINS}}{{this}} {{/each}})
    {{/if}}
    
    # Disable auto-update for performance
    DISABLE_AUTO_UPDATE="true"
    
    [[ -f "$ZSH/oh-my-zsh.sh" ]] && source "$ZSH/oh-my-zsh.sh"
}
{{/if}}

# Lazy load development tools
{{#if ENABLE_NVM}}
lazy_load 'nvm' 'load_nvm'
load_nvm() {
    export NVM_DIR="$HOME/.nvm"
    [[ -s "$NVM_DIR/nvm.sh" ]] && source "$NVM_DIR/nvm.sh"
    [[ -s "$NVM_DIR/bash_completion" ]] && source "$NVM_DIR/bash_completion"
}
{{/if}}

{{#if ENABLE_RBENV}}
lazy_load 'rbenv' 'load_rbenv'
load_rbenv() {
    if command -v rbenv >/dev/null 2>&1; then
        eval "$(rbenv init - zsh)"
    fi
}
{{/if}}

{{#if ENABLE_PYENV}}
lazy_load 'pyenv' 'load_pyenv'
load_pyenv() {
    if command -v pyenv >/dev/null 2>&1; then
        eval "$(pyenv init - zsh)"
    fi
}
{{/if}}

# Prompt setup (immediate for responsiveness)
{{#if CUSTOM_PROMPT}}
{{{CUSTOM_PROMPT}}}
{{else}}
# Simple, fast prompt
PROMPT='%F{green}%n@%m%f:%F{blue}%~%f%# '
{{/if}}

# Execute deferred initializations on first prompt
if [[ -n "${DEFERRED_INIT_COMMANDS:-}" ]]; then
    # Use precmd hook to execute once
    precmd_execute_deferred() {
        execute_deferred_init
        # Remove this function after first execution
        unset -f precmd_execute_deferred
        # Remove from precmd_functions array
        precmd_functions=(${precmd_functions:#precmd_execute_deferred})
    }
    
    # Add to precmd functions
    autoload -Uz add-zsh-hook
    add-zsh-hook precmd precmd_execute_deferred
fi

# Local customizations (loaded last)
{{#each LOCAL_CONFIG_FILES}}
[[ -f "{{this}}" ]] && source "{{this}}"
{{/each}}